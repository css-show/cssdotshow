# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2.3.1

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
          
      - name: Cache npm package
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn package
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn
        
      - name: Install CloudBase-Cli
        run: npm install -g @cloudbase/cli
        
      - name: Build
        run: yarn build
          
      - name: Debug
        run: ls out
          
      # - name: Release
        # env:
          # GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        # run: npx semantic-release
          
      # - name: Deploy to GitHub Pages
        # uses: JamesIves/github-pages-deploy-action@4.1.3
        # with:
          # GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          # BRANCH: gh-pages
          # FOLDER: out
          # CLEAN: true
          # CLEAN_EXCLUDE: '["CNAME", ".nojekyll"]'
          
      #- name: Deploy to Tencent CloudBase
        #uses: TencentCloudBase/cloudbase-action@v2
        #env:
          #ENV_ID: ${{secrets.envId}}
          #accessToken: ${{ secrets.accessToken }}
        #with:
          #secretId: ${{secrets.secretId}}
          #secretKey: ${{secrets.secretKey}}
          #envId: ${{secrets.envId}}
          
      - name: Login to Tencent CloudBase
        env:
          SECRET_ID: ${{secrets.secretId}}
          SECRET_KEY: ${{secrets.secretKey}}
        run: tcb login --apiKeyId "$SECRET_ID" --apiKey "$SECRET_KEY"
          
      - name: Deploy to Tencent CloudBase
        env:
          ENV_ID: ${{secrets.envId}}
        run: tcb framework deploy -e "$ENV_ID"
